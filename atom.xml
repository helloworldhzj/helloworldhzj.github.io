<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>贺子骏的博客</title>
  
  <subtitle>1195529182</subtitle>
  <link href="https://helloworldhzj.github.io/atom.xml" rel="self"/>
  
  <link href="https://helloworldhzj.github.io/"/>
  <updated>2023-10-28T07:54:01.713Z</updated>
  <id>https://helloworldhzj.github.io/</id>
  
  <author>
    <name>贺子骏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://helloworldhzj.github.io/2023/10/28/php%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://helloworldhzj.github.io/2023/10/28/php%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-10-28T07:53:05.461Z</published>
    <updated>2023-10-28T07:54:01.713Z</updated>
    
    <content type="html"><![CDATA[<p>PHP 脚本在服务器上执行</p><h2 id="什么是-PHP-文件？"><a href="#什么是-PHP-文件？" class="headerlink" title="什么是 PHP 文件？"></a>什么是 PHP 文件？</h2><ul><li>PHP 文件能够包含文本、HTML、CSS 以及 PHP 代码</li><li>PHP 代码在服务器上执行，而结果以纯文本返回浏览器</li></ul><h2 id="PHP-能够做什么？"><a href="#PHP-能够做什么？" class="headerlink" title="PHP 能够做什么？"></a>PHP 能够做什么？</h2><ul><li>PHP 能够生成动态页面内容</li><li>PHP 能够创建、打开、读取、写入、删除以及关闭服务器上的文件</li><li>PHP 能够接收表单数据</li><li>PHP 能够发送并取回 cookies</li><li>PHP 能够添加、删除、修改数据库中的数据</li><li>PHP 能够限制用户访问网站中的某些页面</li><li>PHP 能够对数据进行加密</li></ul><p>PHP 脚本以 <?php 开头，以 ?> 结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张 PHP 页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot;Hello World!&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="PHP-大小写敏感"><a href="#PHP-大小写敏感" class="headerlink" title="PHP 大小写敏感"></a>PHP 大小写敏感</h2><p>在php中,函数\类\关键词\对大小写不敏感</p><p>变量对大小写敏感</p><h3 id="PHP-变量规则："><a href="#PHP-变量规则：" class="headerlink" title="PHP 变量规则："></a>PHP 变量规则：</h3><ul><li>变量以 $ 符号开头，其后是变量的名称</li><li>变量名称必须以字母或下划线开头</li><li>变量名称不能以数字开头</li><li>变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _）</li><li>变量名称对大小写敏感（$y 与 $Y 是两个不同的变量）</li></ul><h2 id="PHP-static-关键词"><a href="#PHP-static-关键词" class="headerlink" title="PHP static 关键词"></a>PHP static 关键词</h2><p>通常，当函数完成&#x2F;执行后，会删除所有变量。不过，有时我需要不删除某个局部变量。实现这一点需要更进一步的工作。</p><p>在首次声明变量时使用 <em>static</em> 关键词：</p><p>然后，每当函数被调用时，这个变量所存储的信息都是函数最后一次被调用时所包含的信息。</p><p>注释：该变量仍然是函数的局部变量。</p><h2 id="PHP-echo-和-print-语句"><a href="#PHP-echo-和-print-语句" class="headerlink" title="PHP echo 和 print 语句"></a>PHP echo 和 print 语句</h2><p>echo 和 print 之间的差异：</p><ul><li>echo - 能够输出一个以上的字符串</li><li>print - 只能输出一个字符串，并始终返回 1</li></ul><p>提示：echo 比 print 稍快，因为它不返回任何值(字符串中能包含HTML标记)</p><p>php数据类型包括String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）</p><p>对象必须声明,用class关键字声明类对象,类是可以包含属性和方法的结构</p><p><strong>PHP中的常量是什么？</strong></p><p>常量是一个简单值的标识符（名字）。常量值被定义后，在脚本的其他任何地方都不能被改变。默认是全局变量，可以在整个运行的脚本的任何地方使用</p><h2 id="设置-PHP-常量"><a href="#设置-PHP-常量" class="headerlink" title="设置 PHP 常量"></a>设置 PHP 常量</h2><p>设置常量，使用 define() 函数，函数语法如下：</p><p>bool define ( string $name , mixed $value [, bool $case_insensitive &#x3D; false ] )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该函数有三个参数:</span><br></pre></td></tr></table></figure><ul><li><strong>name：</strong>必选参数，常量名称，即标志符。</li><li><strong>value：</strong>必选参数，常量的值。</li><li><strong>case_insensitive</strong> ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的</li></ul><p><strong>php字符串变量用于存储并处理文本</strong></p><p>可以在直接在函数中使用字符串,或者存储在变量中</p><h2 id="PHP-并置运算符"><a href="#PHP-并置运算符" class="headerlink" title="PHP 并置运算符"></a>PHP 并置运算符</h2><p>并置运算符 (.) 用于把两个字符串值连接起来<img src="https://img2023.cnblogs.com/blog/3217736/202308/3217736-20230817222114892-1221127140.png" alt="img"></p><p>这里是用.”空格”.</p><h2 id="PHP-strlen-函数"><a href="#PHP-strlen-函数" class="headerlink" title="PHP strlen() 函数"></a>PHP strlen() 函数</h2><p>strlen() 函数返回字符串的长度（字符数）</p><h2 id="PHP-strpos-函数"><a href="#PHP-strpos-函数" class="headerlink" title="PHP strpos() 函数"></a>PHP strpos() 函数</h2><p>用于在字符串内查找一个字符或一段指定的文本,如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3217736/202308/3217736-20230817222322116-2137425672.png" alt="img"></p><h1 id="PHP-运算符"><a href="#PHP-运算符" class="headerlink" title="PHP 运算符"></a>PHP 运算符</h1><p>php运算符包括算数运算符、赋值运算符、递增\递减运算符、比较运算符、逻辑运算符、数组运算符、三元运算符、组合比较符</p><p><img src="https://img2023.cnblogs.com/blog/3217736/202308/3217736-20230817222833614-108190875.png" alt="img"></p><p>a xor b xor(异或符) 描述:如果ab中有且仅有一个为ture,则返回ture</p><p>a &amp;&amp; b     与    如果ab都为ture,则返回ture</p><p>&#x3D;&#x3D;&#x3D;恒等还需类型相同</p><p>a&lt;&#x3D;&gt;b比较运算符,ab若相等0,a&gt;b返回-1.a&lt;b返回1</p><p>if,else,Switch与c语言大致相同,故不做阐述</p><p><strong>php数组是什么意思？</strong></p><p>php数组，特点是将values映射到keys的类型。与其他语言不同的是，PHP中数组的key可以是字符串，而values可以是任意类型。</p><h2 id="PHP-关联数组"><a href="#PHP-关联数组" class="headerlink" title="PHP 关联数组"></a>PHP 关联数组</h2><p>关联数组是使用您分配给数组的指定的键的数组。</p><p>这里有两种创建关联数组的方法：</p><p>$age&#x3D;array(“Peter”&#x3D;&gt;”35”,”Ben”&#x3D;&gt;”37”,”Joe”&#x3D;&gt;”43”);</p><p>or:</p><p>$age[‘Peter’]&#x3D;”35”;<br>$age[‘Ben’]&#x3D;”37”;<br>$age[‘Joe’]&#x3D;”43”;</p><p><strong>PHP数组排序函数方法有：sort()、rsort() 、asort() 、ksort()、arsort()、krsort()</strong></p><ul><li>sort() - 对数组进行升序排列</li><li>rsort() - 对数组进行降序排列</li><li>asort() - 根据关联数组的值，对数组进行升序排列</li><li>ksort() - 根据关联数组的键，对数组进行升序排列</li><li>arsort() - 根据关联数组的值，对数组进行降序排列</li><li>krsort() - 根据关联数组的键，对数组进行降序排列</li></ul><h1 id="PHP-超级全局变量"><a href="#PHP-超级全局变量" class="headerlink" title="PHP 超级全局变量"></a>PHP 超级全局变量</h1><p>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的</p><p>有: $GLOBALS 、$_SERVER 、$_REQUEST 、$_POST、$_GET 、$_FILES、$_ENV、$_COOKIE、$_SESSION全部作用域中都可用</p><p>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；服务器可能会忽略一些，或者提供一些没有在这里列举出来的项目。</p><table><thead><tr><th>元素&#x2F;代码</th><th>描述</th></tr></thead><tbody><tr><td>$_SERVER[‘PHP_SELF’]</td><td>当前执行脚本的文件名，与 document root 有关。例如，在地址为 <a href="http://example.com/test.php/foo.bar">http://example.com/test.php/foo.bar</a> 的脚本中使用 $<em>SERVER[‘PHP_SELF’] 将得到 &#x2F;test.php&#x2F;foo.bar。__FILE</em>_ 常量包含当前(例如包含)文件的完整路径和文件名。 从 PHP 4.3.0 版本开始，如果 PHP 以命令行模式运行，这个变量将包含脚本名。之前的版本该变量不可用。</td></tr><tr><td>$_SERVER[‘GATEWAY_INTERFACE’]</td><td>服务器使用的 CGI 规范的版本；例如，”CGI&#x2F;1.1”。</td></tr><tr><td>$_SERVER[‘SERVER_ADDR’]</td><td>当前运行脚本所在的服务器的 IP 地址。</td></tr><tr><td>$_SERVER[‘SERVER_NAME’]</td><td>当前运行脚本所在的服务器的主机名。如果脚本运行于虚拟主机中，该名称是由那个虚拟主机所设置的值决定。</td></tr><tr><td>$_SERVER[‘SERVER_SOFTWARE’]</td><td>服务器标识字符串，在响应请求时的头信息中给出。 (如：Apache&#x2F;2.2.24)</td></tr><tr><td>$_SERVER[‘SERVER_PROTOCOL’]</td><td>请求页面时通信协议的名称和版本。例如，”HTTP&#x2F;1.0”。</td></tr><tr><td>$_SERVER[‘REQUEST_METHOD’]</td><td>访问页面使用的请求方法；例如，”GET”, “HEAD”，”POST”，”PUT”。</td></tr><tr><td>$_SERVER[‘REQUEST_TIME’]</td><td>请求开始时的时间戳。从 PHP 5.1.0 起可用。 (如：1377687496)</td></tr><tr><td>$_SERVER[‘QUERY_STRING’]</td><td>query string（查询字符串），如果有的话，通过它进行页面访问。</td></tr></tbody></table><table><thead><tr><th>$_SERVER[‘HTTP_ACCEPT’]</th><th>当前请求头中 Accept: 项的内容，如果存在的话。</th></tr></thead><tbody><tr><td>$_SERVER[‘HTTP_ACCEPT_CHARSET’]</td><td>当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：”iso-8859-1,*,utf-8”。</td></tr><tr><td>$_SERVER[‘HTTP_HOST’]</td><td>当前请求头中 Host: 项的内容，如果存在的话。</td></tr><tr><td>$_SERVER[‘HTTP_REFERER’]</td><td>引导用户代理到当前页的前一页的地址（如果存在）。由 user agent 设置决定。并不是所有的用户代理都会设置该项，有的还提供了修改 HTTP_REFERER 的功能。简言之，该值并不可信。)</td></tr><tr><td>$_SERVER[‘HTTPS’]</td><td>如果脚本是通过 HTTPS 协议被访问，则被设为一个非空的值。</td></tr><tr><td>$_SERVER[‘REMOTE_ADDR’]</td><td>浏览当前页面的用户的 IP 地址。</td></tr><tr><td>$_SERVER[‘REMOTE_HOST’]</td><td>浏览当前页面的用户的主机名。DNS 反向解析不依赖于用户的 REMOTE_ADDR。</td></tr><tr><td>$_SERVER[‘REMOTE_PORT’]</td><td>用户机器上连接到 Web 服务器所使用的端口号。</td></tr><tr><td>$_SERVER[‘SCRIPT_FILENAME’]</td><td>当前执行脚本的绝对路径。</td></tr><tr><td>$_SERVER[‘SERVER_ADMIN’]</td><td>该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。如果脚本运行在一个虚拟主机上，则该值是那个虚拟主机的值。(如：<a href="mailto:&#115;&#x6f;&#109;&#101;&#x6f;&#x6e;&#101;&#64;&#112;&#104;&#x70;&#x2e;&#99;&#x6e;">&#115;&#x6f;&#109;&#101;&#x6f;&#x6e;&#101;&#64;&#112;&#104;&#x70;&#x2e;&#99;&#x6e;</a>)</td></tr></tbody></table><table><thead><tr><th>$_SERVER[‘SERVER_PORT’]</th><th>Web 服务器使用的端口。默认值为 “80”。如果使用 SSL 安全连接，则这个值为用户设置的 HTTP 端口。</th></tr></thead><tbody><tr><td>$_SERVER[‘SERVER_SIGNATURE’]</td><td>包含了服务器版本和虚拟主机名的字符串。</td></tr><tr><td>$_SERVER[‘PATH_TRANSLATED’]</td><td>当前脚本所在文件系统（非文档根目录）的基本路径。这是在服务器进行虚拟到真实路径的映像后的结果。</td></tr><tr><td>$_SERVER[‘SCRIPT_NAME’]</td><td>包含当前脚本的路径。这在页面需要指向自己时非常有用。<strong>FILE</strong> 常量包含当前脚本(例如包含文件)的完整路径和文件名。</td></tr><tr><td>$_SERVER[‘SCRIPT_URI’]</td><td>URI 用来指定要访问的页面。例如 “&#x2F;index.html”。</td></tr></tbody></table><p><strong>$_REQUEST</strong> 用于收集HTML表单提交的数据。</p><p>以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<form>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_REQUEST 来收集表单中的 input 字段数据:</p><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#x27;PHP_SELF&#x27;];?&gt;&quot;&gt;</span><br><span class="line">Name: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">$name = $_REQUEST[&#x27;fname&#x27;]; </span><br><span class="line">echo $name; </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>$_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method&#x3D;”post”。</p><p>以下实例显示了一个输入字段（input）及提交按钮(submit)的表单(form)。 当用户通过点击 “Submit” 按钮提交表单数据时, 表单数据将发送至<form>标签中 action 属性中指定的脚本文件。 在这个实例中，我们指定文件来处理表单数据。如果你希望其他的PHP文件来处理该数据，你可以修改该指定的脚本文件名。 然后，我们可以使用超级全局变量 $_POST 来收集表单中的 input 字段数据:</p><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#x27;PHP_SELF&#x27;];?&gt;&quot;&gt;</span><br><span class="line">Name: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line">$name = $_POST[&#x27;fname&#x27;]; </span><br><span class="line">echo $name; </span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol><li><code>&lt;form method=&quot;post&quot; action=&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;</code><ul><li>这是一个 HTML 表单标签。它用于创建一个用户输入的表单。</li><li><code>method=&quot;post&quot;</code>：指定了提交表单时使用的 HTTP 方法为 POST。POST 方法用于向服务器发送数据。</li><li><code>action=&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;</code>：<code>action</code> 属性定义了表单提交后数据应该发送到的 URL。<code>&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;</code> 是一个 PHP 代码片段，它会将表单数据提交到当前页面的 URL。这意味着数据将被发送回到相同的页面进行处理。</li></ul></li><li><code>Name: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;</code><ul><li>这是一个文本输入字段，用于用户输入姓名。<code>name=&quot;fname&quot;</code> 定义了该输入字段的名称，这将用于在提交表单时将输入数据发送到服务器。</li></ul></li><li><code>&lt;input type=&quot;submit&quot;&gt;</code><ul><li>这是一个提交按钮。当用户点击此按钮时，表单数据将被提交到服务器以进行处理。</li></ul></li><li><code>&lt;?php $name = $_POST[&#39;fname&#39;]; echo $name; ?&gt;</code><ul><li>这是一段嵌入在 HTML 中的 PHP 代码，用于处理表单提交后的数据。</li><li><code>$name = $_POST[&#39;fname&#39;];</code>：这一行代码从 <code>$_POST</code> 超全局数组中获取名为 <code>fname</code> 的值，也就是用户在文本框中输入的姓名，并将其赋值给变量 <code>$name</code>。</li><li><code>echo $name;</code>：这一行代码使用 <code>echo</code> 函数将变量 <code>$name</code> 的值输出到页面上。这将在用户提交表单后，在页面上显示用户输入的姓名。</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for 循环同c</span><br><span class="line">foreach循环</span><br><span class="line">用于遍历数组</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$x=array(&quot;one&quot;,&quot;two&quot;,&quot;three&quot;);</span><br><span class="line">foreach ($x as $value)</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line"></span><br><span class="line">  echo $value . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="PHP-函数"><a href="#PHP-函数" class="headerlink" title="PHP 函数"></a>PHP 函数</h1><p>PHP 的真正威力源自于它的函数。 在 PHP 中，提供了超过 1000 个内建的函数。函数是通过调用函数来执行的。 你可以在页面的任何位置调用函数。</p><h2 id="创建-PHP-函数"><a href="#创建-PHP-函数" class="headerlink" title="创建 PHP 函数"></a>创建 PHP 函数</h2><p>函数是通过调用函数来执行的。</p><ul><li>函数名称以字母或下划线开头（不能以数字开头）</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>function <em>functionName</em>()<br>{<br><em>要执行的代码</em>;<br>}</p><h2 id="PHP-函数-添加参数"><a href="#PHP-函数-添加参数" class="headerlink" title="PHP 函数 - 添加参数"></a>PHP 函数 - 添加参数</h2><p>为了给函数添加更多的功能，我们可以添加参数。参数类似变量。</p><p>参数就在函数名称后面有一个括号内指定。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例 1"></a>实例 1</h3><p>下面的实例将输出不同的名字，但姓是相同的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">function writeName($fname)</span><br><span class="line">&#123;</span><br><span class="line">echo $fname . &quot; Refsnes.&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;My name is &quot;;</span><br><span class="line">writeName(&quot;Kai Jim&quot;);</span><br><span class="line">echo &quot;My sister&#x27;s name is &quot;;</span><br><span class="line">writeName(&quot;Hege&quot;);</span><br><span class="line">echo &quot;My brother&#x27;s name is &quot;;</span><br><span class="line">writeName(&quot;Stale&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输出：</p><p>My name is Kai Jim Refsnes.<br>My sister’s name is Hege Refsnes.<br>My brother’s name is Stale Refsnes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">function writeName($fname,$punctuation)</span><br><span class="line">&#123;</span><br><span class="line">echo $fname . &quot; Refsnes&quot; . $punctuation . &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;My name is &quot;;</span><br><span class="line">writeName(&quot;Kai Jim&quot;,&quot;.&quot;);</span><br><span class="line">echo &quot;My sister&#x27;s name is &quot;;</span><br><span class="line">writeName(&quot;Hege&quot;,&quot;!&quot;);</span><br><span class="line">echo &quot;My brother&#x27;s name is &quot;;</span><br><span class="line">writeName(&quot;Ståle&quot;,&quot;?&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>输出：</p><p>My name is Kai Jim Refsnes.<br>My sister’s name is Hege Refsnes!<br>My brother’s name is Ståle Refsnes?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP 脚本在服务器上执行&lt;/p&gt;
&lt;h2 id=&quot;什么是-PHP-文件？&quot;&gt;&lt;a href=&quot;#什么是-PHP-文件？&quot; class=&quot;headerlink&quot; title=&quot;什么是 PHP 文件？&quot;&gt;&lt;/a&gt;什么是 PHP 文件？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PHP 文件能</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://helloworldhzj.github.io/2023/10/28/pwn%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://helloworldhzj.github.io/2023/10/28/pwn%E5%81%9A%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2023-10-28T07:46:56.031Z</published>
    <updated>2023-10-28T07:51:16.504Z</updated>
    
    <content type="html"><![CDATA[<p>checkesec</p><p>file</p><p>./</p><p>gdb</p><p>chmod 777 文件名</p><p>Docker是一种用于开发、交付和运行应用程序的开源平台。它利用容器化技术，可以将应用程序及其所有依赖项打包成一个独立的、可移植的容器。这个容器可以在任何支持Docker的环境中运行，无论是开发者的本地计算机、测试环境还是生产服务器。</p><p>以下是Docker的一些主要用途和好处：</p><p>1. **环境一致性：** Docker允许开发者在开发、测试和生产环境之间保持一致的运行环境。这有助于避免因环境差异而导致的问题。</p><p>2. **轻量级：** 容器是轻量级的，因为它们共享主机操作系统的内核，而不是像虚拟机一样运行完整的操作系统。</p><p>3. **快速部署：** Docker容器可以在几秒钟内启动，从而实现快速部署和扩展应用程序。</p><p>4. **隔离性：** 每个Docker容器都运行在独立的环境中，因此应用程序和其依赖项的任何变化不会影响其他容器或主机系统。</p><p>5. **可移植性：** Docker容器可以在任何支持Docker的平台上运行，无需担心依赖项和配置的问题。</p><p>6. **版本控制：** 应用程序和其依赖项可以被打包成一个镜像，类似于一个快照，这使得版本控制和回滚变得更加容易。</p><p>7. **弹性伸缩：** Docker容器可以通过容器编排工具（如Kubernetes）自动进行弹性伸缩，根据负载自动添加或删除容器实例。</p><p>8. **资源利用率：** 由于容器共享操作系统内核，所以它们的资源利用率更高，相比之下虚拟机通常需要更多的资源。</p><p>Docker的生态系统非常丰富，包括Docker Hub（一个容器镜像的共享平台）、Docker Compose（用于定义和运行多个容器的工具）和容器编排平台（如Kubernetes和Docker Swarm）。这些工具共同构建了现代应用程序开发和部署的基础架构。</p><p>________________________________________________________________________________________________________________________________________________________________________________</p><p>指令流通常指的是计算机程序中的一系列指令或操作，这些指令按照顺序执行，以完成特定的任务或功能。在计算机科学中，程序被编写成一系列指令，这些指令告诉计算机要执行的操作，从而实现所需的任务。</p><p>指令流的执行顺序通常是线性的，从程序的起始点开始，逐步按照指令的顺序执行，直至程序结束。每条指令可能是一条基本操作，也可能是跳转到其他部分的指令，从而在程序的执行过程中实现不同的控制流。</p><p>在现代计算机体系结构中，指令流由处理器（CPU）执行。处理器从内存中读取指令，解码并执行它们，然后根据需要更新内存中的数据。指令流的执行速度取决于处理器的性能以及程序的复杂性。</p><p>总之，指令流是计算机程序中一系列按照特定顺序执行的指令，用于实现特定任务或功能。它是计算机执行操作的基本单位之一。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;checkesec&lt;/p&gt;
&lt;p&gt;file&lt;/p&gt;
&lt;p&gt;./&lt;/p&gt;
&lt;p&gt;gdb&lt;/p&gt;
&lt;p&gt;chmod 777 文件名&lt;/p&gt;
&lt;p&gt;Docker是一种用于开发、交付和运行应用程序的开源平台。它利用容器化技术，可以将应用程序及其所有依赖项打包成一个独立的、可移植的容</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://helloworldhzj.github.io/2023/10/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://helloworldhzj.github.io/2023/10/28/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-10-28T07:35:29.000Z</published>
    <updated>2023-10-28T07:36:17.151Z</updated>
    
    <content type="html"><![CDATA[<p>1111</p><p>AS的AS的 AWd</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1111&lt;/p&gt;
&lt;p&gt;AS的AS的 AWd&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="blog" scheme="https://helloworldhzj.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://helloworldhzj.github.io/2023/10/28/hello-world/"/>
    <id>https://helloworldhzj.github.io/2023/10/28/hello-world/</id>
    <published>2023-10-28T06:41:19.806Z</published>
    <updated>2023-10-28T06:41:19.806Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
